#ifndef LED_MATRIX_COLOR_DATA_H
#define LED_MATRIX_COLOR_DATA_H
#include <Arduino.h>

inline uint32_t A_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t A_color_size = sizeof(A_color) / sizeof(A_color[0]);

inline uint32_t acid_color[256] = {
0x889f82, 0x88ae7a, 0xaed75a, 0x94dd59, 0x90d15d, 0xc0ad5b, 0xdb9a6f, 0xe58b81, 
0xdc7496, 0x9fbe74, 0x82d567, 0x6fe466, 0x9cdf58, 0xdbc647, 0x9f8a7f, 0x948f90, 
0xd734a9, 0xeb2e77, 0xe2ba42, 0xcdd04d, 0x96cf5b, 0x86d365, 0x7ddd6e, 0x92d56f, 
0x76e76e, 0x6ee86e, 0x70e266, 0xb9a669, 0xe49773, 0xe5a647, 0xfc3c50, 0xfe00b6, 
0xf72ca6, 0xe98f4d, 0xe7728a, 0xe77491, 0xc3927a, 0x69ea64, 0x86e169, 0xa5d569, 
0xdf9d76, 0xc6c164, 0x94d656, 0xaab874, 0xb89685, 0xb19986, 0xe78460, 0xf14d96, 
0xf35085, 0xec7458, 0xc28385, 0xc98585, 0xa9c764, 0xb3ba4d, 0xe8727a, 0xf241a6, 
0xf33da8, 0xed6281, 0xe4a242, 0xd9bb4c, 0xed6884, 0xec658b, 0xe97d79, 0xee6e71, 
0xeb855b, 0xe97e77, 0xec688b, 0xe97a72, 0xe6946b, 0xee6c72, 0xf436a3, 0xf33baa, 
0xf630b4, 0xf826b4, 0xf05497, 0xe8867b, 0xe69558, 0xee6383, 0xe39b4e, 0xea934b, 
0xe89f3e, 0xe8973e, 0xee7359, 0xe99c38, 0xdcca4c, 0xe59371, 0xf530aa, 0xf72ab6, 
0xfa10ba, 0xf637a1, 0xe0b061, 0xddca48, 0xe69e5a, 0xf08238, 0xe7a23c, 0xddc243, 
0xa4ce53, 0xbbc953, 0xee6379, 0xef6981, 0xe5a748, 0xe59870, 0xf24799, 0xf727b0, 
0xe9707b, 0xe9876c, 0xe0af58, 0xddb347, 0xea8455, 0xdf657b, 0x80cd6d, 0x91bd55, 
0xb0904e, 0xa1a074, 0xe46f74, 0xb6cf50, 0x9ae25c, 0xcdd34b, 0xdfc24a, 0xe97a6d, 
0xf44077, 0xdfc04c, 0xb6dc52, 0x91e25d, 0xa0dd56, 0xe87f59, 0xbc7a72, 0xaf8d5a, 
0xf34449, 0xf73f58, 0xf27e32, 0xdcac40, 0xb1c649, 0xcfb73f, 0xf1723e, 0xfd147b, 
0xff147a, 0xfd4c36, 0xd4a93d, 0x88dd59, 0xb8bb4a, 0xe57429, 0xfc5a27, 0xf75844, 
0xe98b59, 0xec933a, 0xc18f48, 0x8cd257, 0x72e761, 0xc6b645, 0xf85b3d, 0xff1579, 
0xfe1876, 0xee873b, 0xd8b43f, 0x8dda56, 0xb2c247, 0xe87172, 0xf06d69, 0xf74f52, 
0xfe3254, 0xf35c71, 0xee5e7f, 0xa7cf52, 0x94e35a, 0xd6c945, 0xe0c243, 0xf92f71, 
0xe78256, 0xd8ba3e, 0xe8952a, 0xa5da54, 0xa8cd5b, 0xf1438c, 0xee726c, 0xfa3e5c, 
0xfb3c54, 0xed7766, 0xf731ad, 0xe19c68, 0xe4a335, 0xed6a1a, 0x9acf54, 0xa0db5e, 
0x97e15f, 0xbabb48, 0xc28e32, 0xd28b2e, 0xe4a25b, 0xf05a92, 0xf64b70, 0xfe217e, 
0xfb2b8a, 0xf44d8a, 0xf53da2, 0xec7d5e, 0xc59031, 0xa6ab42, 0xdca53d, 0xcac058, 
0xe5965f, 0xcdb044, 0xa2b348, 0xcfad38, 0xea7c7c, 0xf342aa, 0xe5966c, 0xe88a66, 
0xdb9764, 0xe16489, 0xee3daa, 0xe77c7c, 0xc5d648, 0x99ce53, 0xbfc84c, 0xe97e69, 
0xe97571, 0xcbcb4b, 0x8ee55c, 0x8df25d, 0xb5b86f, 0xa59e88, 0xa19c86, 0xa0af74, 
0xaa9f7b, 0xbd8682, 0xa99c81, 0x95cd6f, 0x99eb5a, 0x93e25a, 0xe18840, 0xfd0a8f, 
0xff0098, 0xe2654d, 0x93e35c, 0xbdd94f, 0xc49c50, 0xe74f92, 0xb6a06d, 0xa6b663, 
0xcca659, 0xd7836f, 0xf83d88, 0xee8147, 0xc6d64e, 0x99d657, 0xeb356b, 0xff0098, 
0xff0098, 0xfe0988, 0xef6242, 0xe4a249, 0xe79d46, 0xea944b, 0xe89356, 0xe98d54, };
inline size_t acid_color_size = sizeof(acid_color) / sizeof(acid_color[0]);

inline uint32_t B_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t B_color_size = sizeof(B_color) / sizeof(B_color[0]);

inline uint32_t black_color[256] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t black_color_size = sizeof(black_color) / sizeof(black_color[0]);

inline uint32_t C_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t C_color_size = sizeof(C_color) / sizeof(C_color[0]);

inline uint32_t D_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t D_color_size = sizeof(D_color) / sizeof(D_color[0]);

inline uint32_t dot_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t dot_color_size = sizeof(dot_color) / sizeof(dot_color[0]);

inline uint32_t E_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t E_color_size = sizeof(E_color) / sizeof(E_color[0]);

inline uint32_t ex_mark_color[40] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t ex_mark_color_size = sizeof(ex_mark_color) / sizeof(ex_mark_color[0]);

inline uint32_t F_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t F_color_size = sizeof(F_color) / sizeof(F_color[0]);

inline uint32_t frame_red_yellow_color[256] = {
0xff1500, 0xffbf00, 0xff1500, 0xffbf00, 0xff1500, 0xffbf00, 0xff1500, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbf00, 
0xff1500, 0xffbf00, 0xff1500, 0xffbf00, 0xff1500, 0xffbf00, 0xff1500, 0xffbf00, };
inline size_t frame_red_yellow_color_size = sizeof(frame_red_yellow_color) / sizeof(frame_red_yellow_color[0]);

inline uint32_t frame_red_yellow2_color[256] = {
0xffbf00, 0xff0000, 0xffbf00, 0xff0000, 0xffbf00, 0xff0000, 0xffbf00, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 
0xffbf00, 0xff0000, 0xffbf00, 0xff0000, 0xffbf00, 0xff0000, 0xffbf00, 0xff0000, };
inline size_t frame_red_yellow2_color_size = sizeof(frame_red_yellow2_color) / sizeof(frame_red_yellow2_color[0]);

inline uint32_t G_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t G_color_size = sizeof(G_color) / sizeof(G_color[0]);

inline uint32_t H_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t H_color_size = sizeof(H_color) / sizeof(H_color[0]);

inline uint32_t heart_color[64] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t heart_color_size = sizeof(heart_color) / sizeof(heart_color[0]);

inline uint32_t I_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t I_color_size = sizeof(I_color) / sizeof(I_color[0]);

inline uint32_t J_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t J_color_size = sizeof(J_color) / sizeof(J_color[0]);

inline uint32_t K_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t K_color_size = sizeof(K_color) / sizeof(K_color[0]);

inline uint32_t L_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t L_color_size = sizeof(L_color) / sizeof(L_color[0]);

inline uint32_t M_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t M_color_size = sizeof(M_color) / sizeof(M_color[0]);

inline uint32_t N_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t N_color_size = sizeof(N_color) / sizeof(N_color[0]);

inline uint32_t neo_color[256] = {
0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ff9d, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0xff0098, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 
0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0xff0098, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 
0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0xff0098, 0xff0098, 0x00ffbf, 
0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0xff0098, 0x00ffbf, 
0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 
0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0xff0098, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 
0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 
0x00ffbf, 0xff0098, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 
0x00ffbf, 0xff0098, 0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0xff0098, 0xff0098, 0x00ffbf, 0x00ffbf, 0xff0098, 0x00ffbf, 0x00ffbf, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0xff0098, 0xff0098, 0x00ffbf, 
0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, 0x00ffbf, };
inline size_t neo_color_size = sizeof(neo_color) / sizeof(neo_color[0]);

inline uint32_t num0_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num0_color_size = sizeof(num0_color) / sizeof(num0_color[0]);

inline uint32_t num1_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num1_color_size = sizeof(num1_color) / sizeof(num1_color[0]);

inline uint32_t num2_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num2_color_size = sizeof(num2_color) / sizeof(num2_color[0]);

inline uint32_t num3_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num3_color_size = sizeof(num3_color) / sizeof(num3_color[0]);

inline uint32_t num4_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num4_color_size = sizeof(num4_color) / sizeof(num4_color[0]);

inline uint32_t num5_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num5_color_size = sizeof(num5_color) / sizeof(num5_color[0]);

inline uint32_t num6_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num6_color_size = sizeof(num6_color) / sizeof(num6_color[0]);

inline uint32_t num7_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num7_color_size = sizeof(num7_color) / sizeof(num7_color[0]);

inline uint32_t num8_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num8_color_size = sizeof(num8_color) / sizeof(num8_color[0]);

inline uint32_t num9_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t num9_color_size = sizeof(num9_color) / sizeof(num9_color[0]);

inline uint32_t O_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t O_color_size = sizeof(O_color) / sizeof(O_color[0]);

inline uint32_t P_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t P_color_size = sizeof(P_color) / sizeof(P_color[0]);

inline uint32_t Q_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t Q_color_size = sizeof(Q_color) / sizeof(Q_color[0]);

inline uint32_t R_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t R_color_size = sizeof(R_color) / sizeof(R_color[0]);

inline uint32_t S_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t S_color_size = sizeof(S_color) / sizeof(S_color[0]);

inline uint32_t space_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t space_color_size = sizeof(space_color) / sizeof(space_color[0]);

inline uint32_t T_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t T_color_size = sizeof(T_color) / sizeof(T_color[0]);

inline uint32_t test_color[256] = {
0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0xff1500, 0x000000, 0xff1500, 0x000000, 0xff1500, 0x000000, 0xff1500, 0x000000, 
0xf7ff14, 0x000000, 0xf7ff14, 0x000000, 0xf7ff14, 0x000000, 0xf7ff14, 0x000000, 
0x50ff00, 0x50ff00, 0x50ff00, 0x50ff00, 0x50ff00, 0x50ff00, 0x50ff00, 0x50ff00, 
0xffbf00, 0xffbf00, 0xffbf00, 0xffbf00, 0xffbf00, 0xffbf00, 0xffbf00, 0xffbf00, 
0xff00aa, 0xff00aa, 0xff00aa, 0xff00aa, 0xff00aa, 0xff00aa, 0xff00aa, 0xff00aa, 
0xae00ff, 0xae00ff, 0xae00ff, 0xae00ff, 0xae00ff, 0xae00ff, 0xae00ff, 0xae00ff, 
0x0055ff, 0x0055ff, 0x0055ff, 0x0055ff, 0x0055ff, 0x0055ff, 0x0055ff, 0x0055ff, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t test_color_size = sizeof(test_color) / sizeof(test_color[0]);

inline uint32_t U_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t U_color_size = sizeof(U_color) / sizeof(U_color[0]);

inline uint32_t V_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t V_color_size = sizeof(V_color) / sizeof(V_color[0]);

inline uint32_t W_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t W_color_size = sizeof(W_color) / sizeof(W_color[0]);

inline uint32_t white_color[256] = {
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, };
inline size_t white_color_size = sizeof(white_color) / sizeof(white_color[0]);

inline uint32_t X_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t X_color_size = sizeof(X_color) / sizeof(X_color[0]);

inline uint32_t Y_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t Y_color_size = sizeof(Y_color) / sizeof(Y_color[0]);

inline uint32_t Z_color[48] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, };
inline size_t Z_color_size = sizeof(Z_color) / sizeof(Z_color[0]);

#endif